diff --git a/config/default.config b/config/default.config
index 57d5186..dd43073 100644
--- a/config/default.config
+++ b/config/default.config
@@ -1,20 +1,20 @@
 torture.generator.nseqs     200
 torture.generator.memsize   1024
 torture.generator.fprnd     0
-torture.generator.amo       true
-torture.generator.mul       true
-torture.generator.divider   true
+torture.generator.amo       false
+torture.generator.mul       false
+torture.generator.divider   false
 torture.generator.segment   true
 torture.generator.loop	    true
 torture.generator.loop_size 64
 
-torture.generator.mix.xmem    10
+torture.generator.mix.xmem    20
 torture.generator.mix.xbranch 20
-torture.generator.mix.xalu    50
-torture.generator.mix.fgen    10
-torture.generator.mix.fpmem   5
-torture.generator.mix.fax     3
-torture.generator.mix.fdiv    2
+torture.generator.mix.xalu    60
+torture.generator.mix.fgen    0
+torture.generator.mix.fpmem   0
+torture.generator.mix.fax     0
+torture.generator.mix.fdiv    0
 torture.generator.mix.vec     0
 
 torture.generator.vec.vf 1
@@ -49,4 +49,3 @@ torture.overnight.errors  1
 torture.overnight.minutes 1
 torture.overnight.outdir  output/failedtests
 torture.overnight.email   your@email.address
-
diff --git a/generator/src/main/scala/HWRegPool.scala b/generator/src/main/scala/HWRegPool.scala
index fa995a7..79b2afe 100644
--- a/generator/src/main/scala/HWRegPool.scala
+++ b/generator/src/main/scala/HWRegPool.scala
@@ -22,7 +22,7 @@ trait ScalarRegPool extends HWRegPool
   val regname: String
   val ldinst: String
   val stinst: String
-  
+
   def init_regs() =
   {
     var s = name + "_init:\n"
@@ -32,7 +32,7 @@ trait ScalarRegPool extends HWRegPool
     s += "\n"
     s
   }
-  
+
   def save_regs() =
   {
     var s = "\tla x1, " + name + "_output_data\n"
@@ -42,8 +42,8 @@ trait ScalarRegPool extends HWRegPool
     s += "\n"
     s
   }
-  
-  def init_regs_data() = 
+
+  def init_regs_data() =
   {
     var s = "\t.align 8\n"
     s += name + "_init_data:\n"
@@ -52,7 +52,7 @@ trait ScalarRegPool extends HWRegPool
     s += "\n"
     s
   }
-  
+
   def output_regs_data() =
   {
     var s = "\t.align 8\n"
@@ -86,12 +86,12 @@ trait PoolsMaster extends HWRegPool
 
 class XRegsPool extends ScalarRegPool
 {
-  val (name, regname, ldinst, stinst) = ("xreg", "reg_x", "ld", "sd")
+  val (name, regname, ldinst, stinst) = ("xreg", "reg_x", "lw", "sw")
 
   hwregs += new HWReg("x0", true, false)
   for (i <- 1 to 31)
     hwregs += new HWReg("x" + i.toString(), true, true)
-    
+
   override def save_regs() =
   {
     hwregs(1).state = HID
@@ -116,20 +116,20 @@ class FRegsMaster extends ScalarRegPool with PoolsMaster
     d_reg_num -= mv_n
     s_reg_num += mv_n
   }
-  
+
   while(d_reg_num.length < 5)
   {
     val mv_n = rand_pick(s_reg_num)
     s_reg_num -= mv_n
     d_reg_num += mv_n
   }
-  
+
   val s_regpool = new FRegsPool(s_reg_num.toArray)
   val d_regpool = new FRegsPool(d_reg_num.toArray)
   val regpools = ArrayBuffer(s_regpool.asInstanceOf[HWRegPool],
                  d_regpool.asInstanceOf[HWRegPool])
   override val hwregs = regpools.map(_.hwregs).flatten
-  
+
   override def init_regs() = //Wrapper function
   {
     var s = "freg_init:\n"+"freg_s_init:\n"+"\tla x1, freg_init_data\n"
@@ -140,7 +140,7 @@ class FRegsMaster extends ScalarRegPool with PoolsMaster
       s += "\tfld" + " " + curreg + ", " + 8*i + "(x1)\n"
     s += "\n\n"
     s
-  } 
+  }
   override def save_regs() = //Wrapper function
   {
     var s = "freg_save:\n"+"\tla x1, freg_output_data\n"
@@ -170,36 +170,36 @@ class VRegsMaster(num_xregs: Int, num_pregs: Int, num_sregs: Int) extends PoolsM
   val x_reg_num = (0 to (num_xregs-1))
   val p_reg_num = (0 to (num_pregs-1))
   val s_reg_num = (0 to (num_sregs-1))
-  
+
   val x_regpool  = new VXRegsPool(x_reg_num.toArray)
   val p_regpool  = new VPRegsPool(p_reg_num.toArray)
   val s_regpool  = new VSRegsPool(s_reg_num.toArray)
   val a_regpool  = new VARegsPool()
-  val regpools = 
+  val regpools =
     ArrayBuffer(x_regpool.asInstanceOf[HWRegPool], p_regpool.asInstanceOf[HWRegPool],
-    s_regpool.asInstanceOf[HWRegPool], a_regpool.asInstanceOf[HWRegPool])  
+    s_regpool.asInstanceOf[HWRegPool], a_regpool.asInstanceOf[HWRegPool])
   override val hwregs = regpools.map(_.hwregs).flatten
 
   def init_regs() =
-  { 
+  {
     var s = "vreg_init:\n"
     s += s_regpool.init_regs()
     s
   }
   def save_regs() =
-  { 
+  {
     var s = "vreg_save:\n"
     s += s_regpool.save_regs()
     s
   }
   def init_regs_data() =
-  { 
+  {
     var s = "vreg_init_data:\n"
     s += s_regpool.init_regs_data()
     s
   }
   def output_regs_data() =
-  { 
+  {
     var s = "vreg_output_data:\n"
     s += s_regpool.output_regs_data()
     s
@@ -223,17 +223,17 @@ class VSRegsPool(reg_nums: Array[Int] = (0 to 255).toArray) extends HWRegPool
   hwregs += new HWReg("vs0", true, false)
   for (i <- reg_nums.drop(1))
     hwregs += new HWReg("vs" + i.toString(), true, true)
-  def init_regs() = 
+  def init_regs() =
   {
     var s = "vsreg_init:\n"+"\tla x1, vsreg_init_data\n"
-    for ((i, curreg) <- reg_nums.zip(hwregs)) 
+    for ((i, curreg) <- reg_nums.zip(hwregs))
     {
       s += "\tld" + " x2, " + 8*i + "(x1)\n"
       s += "\tvmcs"+ " " + curreg + ", x2\n"
     }
     s += "\n\n"
     s
-  } 
+  }
   def save_regs() =
   {
     hwregs(1).state = HID
@@ -245,7 +245,7 @@ class VSRegsPool(reg_nums: Array[Int] = (0 to 255).toArray) extends HWRegPool
     s += ".align 3\n"
     s += "vsreg_save_vf:\n"
     for (curreg <- hwregs.drop(2))
-      if (curreg.is_visible) 
+      if (curreg.is_visible)
       {
         s += "\tvssd vs1, " + curreg + "\n"
         s += "\tvaddi vs1, vs1, 8\n"
@@ -254,7 +254,7 @@ class VSRegsPool(reg_nums: Array[Int] = (0 to 255).toArray) extends HWRegPool
       s += "vsreg_save_end:\n\n"
     s
   }
-  def init_regs_data() = 
+  def init_regs_data() =
   {
     var s = "\t.align 8\n"
     s += "vsreg_init_data:\n"
@@ -263,7 +263,7 @@ class VSRegsPool(reg_nums: Array[Int] = (0 to 255).toArray) extends HWRegPool
     s += "\n"
     s
   }
-  
+
   def output_regs_data() =
   {
     var s = "\t.align 8\n"
diff --git a/generator/src/main/scala/Prog.scala b/generator/src/main/scala/Prog.scala
index 5a6823d..353e1ae 100644
--- a/generator/src/main/scala/Prog.scala
+++ b/generator/src/main/scala/Prog.scala
@@ -157,7 +157,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
         return (reghash(regname1(0)) < reghash(regname2(0)))
       }
     }
-  
+
     val sortedRegs = regstats.toSeq.sortWith(register_lt) //TODO: Better way to sort?
     var s = "---------- Register Accesses ----------\n"
     for ((regname, cnt) <- sortedRegs)
@@ -167,16 +167,16 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
     s
   }
 
-  def sequence_stats(mix: Map[String, Int], vecmix: Map[String, Int], nseqs: Int, vnseq: Int, vfnum: Int): String = 
-  {  
+  def sequence_stats(mix: Map[String, Int], vecmix: Map[String, Int], nseqs: Int, vnseq: Int, vfnum: Int): String =
+  {
     def seq_lt(seq1: (String, Int), seq2: (String, Int)): Boolean =
     {
-      val seqhash = HashMap("xmem"->1,"xbranch"->2,"xalu"->3,"vmem"->4, 
+      val seqhash = HashMap("xmem"->1,"xbranch"->2,"xalu"->3,"vmem"->4,
       "fgen"->5,"fpmem"->6,"fax"->7,"fdiv"->8,"vec"->9,"vonly"->10,"valu"->11,"Generic"->12).withDefaultValue(100)
       if (seqhash(seq1._1) == 100 && seqhash(seq2._1) == 100) return (seq1._1 < seq2._1)
       return seqhash(seq1._1) < seqhash(seq2._1)
     }
-   
+
     val sortedMix = mix.toSeq.sortWith(seq_lt)
     val sortedVecmix = vecmix.toSeq.sortWith(seq_lt)
     var s = "----- Sequence Types Used:"
@@ -215,8 +215,8 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
     }
     s
   }
-  
-  def instruction_stats(): String = 
+
+  def instruction_stats(): String =
   {
     def cat_lt(cat1: (String, Int), cat2: (String, Int)): Boolean =
     {
@@ -359,7 +359,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
     	    progsegs.last.insts += inst
 	    update_stats(inst)
 	  }
-	} else {	
+	} else {
           add_inst(seq.next_inst())
 	}
 
@@ -367,7 +367,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
         {
           seq.free_regs()
           seqs_active -= seq
-          if (seq.isInstanceOf[SeqVec]) 
+          if (seq.isInstanceOf[SeqVec])
             for (vinst <- seq.asInstanceOf[SeqVec].vinsts)
               update_stats(vinst)
         }
@@ -375,13 +375,13 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
         if (rand_range(0,99) < 10) seqs_find_active()
       }
     }
-    
+
     //Final p_seg
     progsegs.last.insts += J(Label("reg_dump"))
 
     if(!segment) { resolve_jalr_las }
     rand_permute(progsegs)
- 
+
     if (killed_seqs >= (nseqs*5))
     {
     println("Warning: Prog killed an excessive number of sequences. (#X=%d, #Fs=%d, #Fd=%d, #VX=%d, #VP=%d, #VS=%d, #VA=%d)" format (xregs.size, fregs_s.size, fregs_d.size, vxregs.size, vpregs.size, vsregs.size, varegs.size))
@@ -402,11 +402,11 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
   def code_header(using_fpu: Boolean, using_vec: Boolean, fprnd: Int) =
   {
     "\n" +
-    (if (using_vec) "RVTEST_RV64UV\n"
-     else if (using_fpu) "RVTEST_RV64UF\n"
-     else "RVTEST_RV64U\n") +
+    (if (using_vec) "RVTEST_RV32UV\n"
+     else if (using_fpu) "RVTEST_RV32UF\n"
+     else "RVTEST_RV32U\n") +
     "RVTEST_CODE_BEGIN\n" +
-    (if (using_vec) init_vector() else "") + 
+    (if (using_vec) init_vector() else "") +
     "\n" +
     "\tj test_start\n" +
     "\n" +
@@ -423,7 +423,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
     "\n"
   }
 
-  def init_vector() = 
+  def init_vector() =
   {
     "\n" +
     "\tli x1, " + used_vl + "\n" +
@@ -535,7 +535,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
   def statistics(nseqs: Int, fprnd: Int, mix: Map[String, Int], vnseq: Int, vmemsize: Int, vfnum: Int, vecmix: Map[String, Int],
                  use_amo: Boolean, use_mul: Boolean, use_div: Boolean) =
   {
-    "--------------------------------------------------------------------------\n" + 
+    "--------------------------------------------------------------------------\n" +
     "-- Statistics for assembly code created by RISCV torture test generator --\n" +
     get_time() +
     "--------------------------------------------------------------------------\n" +
@@ -548,7 +548,7 @@ class Prog(memsize: Int, veccfg: Map[String,String], loop : Boolean)
     "---------- fprnd = " + fprnd + " ----------\n" +
     "---------- use_amo = " + use_amo + " ----------\n" +
     "---------- use_mul = " + use_mul + " ----------\n" +
-    "---------- use_div = " + use_div + " ----------\n" + 
+    "---------- use_div = " + use_div + " ----------\n" +
     "--------------------------------------------------------------------------\n\n" +
     "--------------------------------------------------------------------------\n" +
     sequence_stats(mix, vecmix, nseqs, vnseq, vfnum) +
diff --git a/generator/src/main/scala/Rand.scala b/generator/src/main/scala/Rand.scala
index a677d2d..ec0745f 100644
--- a/generator/src/main/scala/Rand.scala
+++ b/generator/src/main/scala/Rand.scala
@@ -15,7 +15,7 @@ object Rand
     low + Random.nextInt(span)
   }
 
-  def rand_shamt() = rand_range(0, 63)
+  def rand_shamt() = rand_range(0, 31)
   def rand_shamtw() = rand_range(0, 31)
   def rand_seglen() = rand_range(0, 7)
   def rand_imm() = rand_range(-2048, 2047)
diff --git a/generator/src/main/scala/SeqALU.scala b/generator/src/main/scala/SeqALU.scala
index a1f27a5..18d6d7b 100644
--- a/generator/src/main/scala/SeqALU.scala
+++ b/generator/src/main/scala/SeqALU.scala
@@ -68,17 +68,12 @@ class SeqALU(xregs: HWRegPool, use_mul: Boolean, use_div: Boolean) extends InstS
   candidates += seq_src1_immfn(SRAI, rand_shamt)
   candidates += seq_src1_immfn(ORI, rand_imm)
   candidates += seq_src1_immfn(ANDI, rand_imm)
-  candidates += seq_src1_immfn(ADDIW, rand_imm)
-  candidates += seq_src1_immfn(SLLIW, rand_shamtw)
-  candidates += seq_src1_immfn(SRLIW, rand_shamtw)
-  candidates += seq_src1_immfn(SRAIW, rand_shamtw)
 
   val oplist = new ArrayBuffer[Opcode]
 
   oplist += (ADD, SUB, SLL, SLT, SLTU, XOR, SRL, SRA, OR, AND)
-  oplist += (ADDW, SUBW, SLLW, SRLW, SRAW)
-  if (use_mul) oplist += (MUL, MULH, MULHSU, MULHU, MULW)
-  if (use_div) oplist += (DIV, DIVU, REM, REMU, DIVW, DIVUW, REMW, REMUW)
+  if (use_mul) oplist += (MUL, MULH, MULHSU, MULHU)
+  if (use_div) oplist += (DIV, DIVU, REM, REMU)
 
   for (op <- oplist)
   {
diff --git a/generator/src/main/scala/SeqBranch.scala b/generator/src/main/scala/SeqBranch.scala
index bba9895..d0c8128 100644
--- a/generator/src/main/scala/SeqBranch.scala
+++ b/generator/src/main/scala/SeqBranch.scala
@@ -75,7 +75,7 @@ class SeqBranch(xregs: HWRegPool) extends InstSeq
     val reg_mask = reg_write_visible(xregs)
 
     insts += ADDI(reg_one, reg_read_zero(xregs), Imm(1))
-    insts += SLL(reg_one, reg_one, Imm(63))
+    insts += SLL(reg_one, reg_one, Imm(31))
     insts += ADDI(reg_mask, reg_read_zero(xregs), Imm(-1))
     insts += XOR(reg_mask, reg_mask, reg_one)
     insts += AND(reg_dst1, reg_src, reg_mask)
@@ -95,7 +95,7 @@ class SeqBranch(xregs: HWRegPool) extends InstSeq
     val reg_mask = reg_write_visible(xregs)
 
     insts += ADDI(reg_one, reg_read_zero(xregs), Imm(1))
-    insts += SLL(reg_one, reg_one, Imm(63))
+    insts += SLL(reg_one, reg_one, Imm(31))
     insts += ADDI(reg_mask, reg_read_zero(xregs), Imm(-1))
     insts += XOR(reg_mask, reg_mask, reg_one)
     insts += AND(reg_dst1, reg_src1, reg_mask)
@@ -130,7 +130,7 @@ class SeqBranch(xregs: HWRegPool) extends InstSeq
   def get_two_regs_and_branch_with_label( op: Opcode, helper: () => (Operand, Operand), label: Label, flip_ops:Boolean = false) = () =>
   {
     val regs = helper()
-    if(!flip_ops) insts += op(regs._1, regs._2, label) else insts += op(regs._2, regs._1, label) 
+    if(!flip_ops) insts += op(regs._1, regs._2, label) else insts += op(regs._2, regs._1, label)
   }
 
   // These tests have the same labels if the operand order is reversed
diff --git a/generator/src/main/scala/SeqMem.scala b/generator/src/main/scala/SeqMem.scala
index 3c180ed..fea8f00 100644
--- a/generator/src/main/scala/SeqMem.scala
+++ b/generator/src/main/scala/SeqMem.scala
@@ -51,7 +51,7 @@ class SeqMem(xregs: HWRegPool, mem: Mem, use_amo: Boolean) extends InstSeq
 
        def getRandOpAndAddr (dw_addr: Int, is_store: Boolean): (Opcode, Int) =
        {
-          val typ = AccessType.values.toIndexedSeq(rand_range(0,6))
+          val typ = AccessType.values.toIndexedSeq(rand_range(0,4))
           if (is_store)
           {
              if      (typ == byte  || typ ==ubyte)  (SB, dw_addr + rand_addr_b(8))
@@ -110,15 +110,12 @@ class SeqMem(xregs: HWRegPool, mem: Mem, use_amo: Boolean) extends InstSeq
   candidates += seq_load_addrfn(LH, rand_addr_h)
   candidates += seq_load_addrfn(LHU, rand_addr_h)
   candidates += seq_load_addrfn(LW, rand_addr_w)
-  candidates += seq_load_addrfn(LWU, rand_addr_w)
-  candidates += seq_load_addrfn(LD, rand_addr_d)
 
   candidates += seq_store_addrfn(SB, rand_addr_b)
   candidates += seq_store_addrfn(SH, rand_addr_h)
   candidates += seq_store_addrfn(SW, rand_addr_w)
-  candidates += seq_store_addrfn(SD, rand_addr_d)
 
-  if (use_amo) 
+  if (use_amo)
   {
     candidates += seq_amo_addrfn(AMOADD_W, rand_addr_w)
     candidates += seq_amo_addrfn(AMOSWAP_W, rand_addr_w)
